#!/bin/bash

function select_option {

    # little helpers for terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()  { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
    print_option()     { printf "   $1 "; }
    print_selected()   { printf "  $ESC[7m $1 $ESC[27m"; }
    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        { read -s -n3 key 2>/dev/null >&2
                         if [[ $key = $ESC[A ]]; then echo up;    fi
                         if [[ $key = $ESC[B ]]; then echo down;  fi
                         if [[ $key = ""     ]]; then echo enter; fi; }

    # initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done

    # determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - $#))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local selected=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx))
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
            else
                print_option "$opt"
            fi
            ((idx++))
        done

        # user key control
        case `key_input` in
            enter) break;;
            up)    ((selected--));
                   if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
            down)  ((selected++));
                   if [ $selected -ge $# ]; then selected=0; fi;;
        esac
    done

    # cursor position back to normal
    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

    return $selected
}

function select_opt {
    select_option "$@" 1>&2
    local result=$?
    echo $result
    return $result
}


#reset to home directory everytime script is launched
reset_to_home=true


#set menu directory
select_menu_directory=$(cat /home/$user/tfm/selectmenu.txt)


#clear screen
clear



#lists current directory and makes a menu so you can choose file/folder to cd into

function list_current_dir {

#checks if user copied a file
if [ -z "$copied" ]
then
echo
else
	echo "copied file $copied"
	copy_selected=""
fi


echo "current directory: $PWD"
echo

#lists directory 
list_dir=$(ls) 

#format directory for select menu
format_dir=$(ls | awk '{print $0"\""}' | awk '$0="\""$0' | tr -d '\n' | sed 's/""/" "/g') 

#number of files and folders
current_dir_nums=$(ls | wc -l)

#reset count number
count=0

menu0=$(echo -e "function menu {\n"'case `select_opt  "' '\nExit"` in' )
menu1=$(echo "$menu0" | sed "s/t  /t $format_dir /g" | sed 's/" " /" "Back" "Menu" "/g')


list_dir_menu=$(ls | sed '$aBack' | sed '$aMenu')


#loop in a variable
results=$(

count=0

echo "$list_dir_menu" | while read line
do

echo "    $count)"

#get chosen file or directory with a line number, will use later in function open 
echo "choice=$count"

echo ";;"

let count=count+1
done
)


functsel=$(echo "$select_menu_directory")

#format select menu
menu=$(echo -e "\n$menu1" "\n$results" "\nesac" "\n}" "\nmenu")

formated=$(echo "$functsel $menu") 

#executes select menu of current directory
eval "$formated" 

#fileofolder=$(ls | sed -n "$count p") 

open
}


#opens folders or files
function open {

#first file starts at 0 so we add 1 to get our real line number
f_num=$(echo "$choice + 1" | bc -l)

#prints chosen line
a=$(echo "$list_dir_menu" | sed -n "$f_num p")


if [[ $copy_selected == "cs" ]]
then
	clear
	copied=$(echo "$PWD/$a")
	echo "copied file $copied"
	list_current_dir

#check if file or folder or back or menu
elif [[ -d "$PWD/$a" ]]
then
        clear
        cd "$PWD/$a"
	list_current_dir

elif [[ -f "$PWD/$a" ]]
then
        clear
        cppm_file

elif [[ $a == "Back" ]]
then
        echo "Going back directory"
        goback

elif [[ $a == "Menu" ]]
then
	echo "$a"
	cppm_dir

else
        echo
        #exit 1
fi

}



#if hit back button then go back directory
function goback {
clear
cd ..
list_current_dir
$SHELL
}


function cppm_file {

case `select_opt "Open file in VIM" "Permissions" "
Exit"` in
    0)
ofv
;;
    1)
permissions_file
;;
esac


}


#open file with vim
function ofv {
	sudo vim $PWD/$a
	list_current_dir
}



#copy paste permissions menu for directory
#create a new folder

function cppm_dir {
clear
case `select_opt "Go back" "Create a new Folder" "Copy" "Paste" "Permissions" "
Exit"` in
    0)
    clear
list_current_dir
;;
    1)
	clear
	echo "Name of folder?"
	read new_folder
	mkdir "$PWD/$new_folder"
	echo "Folder Created!"
	list_current_dir
;;
    2) 
	copy
;;
    3) 
	paste
;;
    4)
	permissions_folder
;;
esac
}


function copy {
echo "Choose File/Folder to copy"
echo 
echo
copy_selected="cs"
list_current_dir
}




#paste into current folder

function paste {
pasted=$(echo "$PWD")


#if copied is a directory then copy to current folder
if [[ -d "$copied" ]]
then

	clear
	cp -r "$copied" "$pasted"
	echo "$a pasted"

#if copied is a file then copy to current folder 
elif [[ -f "$copied" ]]
then    

	clear
	cp "$copied" "$pasted"
	echo "$copied $pasted"

else
	echo "sorry command not recongnized"
	exit 1
fi

#reset copied variable to empty so script doesnt get stuck on a loop
copied=""
list_current_dir
}

#shows permissions of file
function permissions_file {
ls -la | grep "$a" 
}


function permissions_folder {
ls -la | grep "$a"
}

#start beginning of script
list_current_dir
